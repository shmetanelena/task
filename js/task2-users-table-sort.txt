1. Создать и добавить на страницу таблицу пользователей с данными из массива users. 

2. Таблица содержит колонки согласно массиву fields - в полях title указаны заголовки колонок,
  в полях id - названия соответствующих полей объектов из users. То есть, таблица содержит колонки 
  "Name", "Email", "Eyes", "Active", "Gender".

3. При создании таблицы используем функции document.createElement(), element.append(). 
    Таблица состоит из:
       - заголовка <thead> с одной строкой <tr> и набором элементов <th> (каждый содержит названия колонок), 
       - тела таблицы <tbody> c набором строк <tr> (в каждой набор полей элементах <td>).

4. При формировании заголовка таблицы, используем массив fields и его вспомогательную функцию forEach.

5. Создать функцию fillTable(), которая заполняет (перезаписывает) тело таблицы <tbody>. 
    При создании используем шаблонизацию и сфоримрованный HTML присваиваем через свойство innerHTML.
    Сделать вызов функции fillTable(), чтобы заполнить таблицу первично.


6. Реализовать возможность сортировки данных таблицы следующим образом: при нажатии (click) на заголовок,
    выполняется сортировка массива users по данной колонке и перезаполнение таблицы отсортрованным массивом.
    Обработчик события ставим на ячейку <th> с названием колонки из заголовка.

    Правила сортировки:
        - при первом нажатии на заголовок колонки выполняется сортировка по данной колонке по возрастанию;
        - при повторном нажатии на заголовок колонки - то есть, если по ней выполнена текущая сортировка - порядок сортировки
          меняется на противоположный и так далее;
        - при нажатии на другой заголовок колонки, сортировка выполняется уже по ней, при этом изначальный порядок - по возрастанию.

7. Указать в названии колонки, что таблица отсортирована по ней. 
    К названию добавляем "+", если отсортирована по возрастанию, и "-" - если по убыванию. 
    Например, название "Name +" означает, что таблица отсортирована по полю name по возрастанию, а "Name -", что таблица отсортирована по полю name по убыванию.



Рекомендации:
    - Сортировку массива users выполненям с помощью функции sort массива.

    - Для получения значений полей объектов из массива users по названию этих полей помним про возомжность получения поля объекта 
    через [] (т.е. user[имя свойства]). Так можем связать для основной массив с данными users и вспомогательный массив fields.

    - Для хранения данных по текущей сортировке используем переменные sortId (поле, по которому сортируем - "name", "email", ...) 
    и isAscendingSort (порядок сортировки, булево поле, true - сортировка по возрастанию, false - по убыванию).

    - Функцию сортировки можно сделать следующим образом. Создаем функцию sortByField(event), которую вешаем как обработчик события 
     нажатия click на ячейку <th>. По event.currentTarget получаем элемент на котором произошло событие. Если мы при создании ячейки
     прописали этому элементу <th> аттрибут id, в котором указали соответствующее поле объекта user ("name", "email", ...), то мы 
     из значения этого атрибута узнаем требуемое поле для сортировки. Получив поле, сравниваем его тем, что хранится в sortId. 
     Если там то же самое значение, то значит произошло повтроное нажание ячейки и нам нужно инвертировать порядок сортировки isAscendingSort. 
     Если же значения не совпадают, то значит это клик на другой колонке и нам нужно присвоить sortId полученное значение идентификатора
     и установить isAscendingSort = true (исходный порядок сортивки для колонки). Таким образом, мы определили поле для сортировки
     sortId и порядок сортировки isAscendingSort. Далее вызываем метод sort для массива users. В callback-функции нам необходимо 
     получить значения полей сравниваемых объектов user (используем оператор []). Затем следует определить тип поля, 
     так как для разных типов сравнение выполняется по разному. 
     При сравнении полей типа "number" или "boolean" мы можем использовать просто вычитание (например return a - b или return b - a).
     При сравнении полей типа "string" следует использовать localeCompare (то есть, a.localeCompare(b) или b.localeCompare(a)).
     После сортировки массива users перезыписываем таблицу с помощью функции fillTable().
     Затем перезаписываем загловки. Проход по загловкам выполняем с помощью функции forEach массива fields. Проходя по заголовками 
     таблицы прописваем назание из полей field.title и в только в том поле, где field.id == sortId к названию дописываем строку "+"
     или "-"
     
    
