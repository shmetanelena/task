1. Таблица пользователей.
    Заполнить таблицу из документа (идентификатор "users-table") данными из массива users. 
    В колонках Name, Email, Balance указываем значения полей name, email, balance пользователя соответсвенно.
    Используем шаблонизацию. Созданую разметку добавляем к таблице с помощью insertAdjacentHTML.

2. Селектор пользователя.
    Создать селектор (элемент <select>).
    Добавить в селектор набор опций (<option>), у каждой текст - имя пользователя (name).
    Для создания элементов и установки аттрибутов используем createElement, setAttribute.
    Добавить селектор в документ после таблицы.

    Добавить обработчик изменения значения селектора (событие "change"). При выборе пользователя необходимо
    выделить в таблице строку с данным пользователем. Для выделения делаем шрифт нужной строки жирным. 
    Остальные строки - с нормальным шрифтом. Работа со шрифтами через инлайновые стили, а именно свойство font-weight, 
    которое может принимать значения "normal" или "bold". 
    selectedindex

    Рекомендация: для связки выбранной опции и строки таблицы можно использовать идентификаторы. 
    Помним, что в option есть атрибут value, который скрыт (не печатается) и значение которого мы можем получить.
    В аттрибут value можно записать уникальный идентификатор нужного пользователя, например в формате "user-{индекс пользователя в массиве}".
    При этом, такой же идентификатор можно присвоить HTML элементу <tr> - строке с данными пользователя - еще при создании таблицы. 
    Зная значение идентификатора из vaue легко выполнить поиск нужной строки для дальнейших манипуляций.

3. Поиск 
    Создать слой <div>.
    Добавить в слой текстовое поле с идентификатором "search-text" и placeholder со строкой "Enter the text".  
    Добавить в слой элемент <ul>, который будет использоваться для вывода результата, с идентификатором "search-result".
    Для создания элементов и установки аттрибутов используем createElement, setAttribute.
    Добавить слой в документ после селектора пользователя.

    В текстовое поле добавить обработчик изменения текста. Если текст непустой, то следует найти всех пользователей, 
    у который name или email содержат введеную строку. Полученный массив пользователей преобразовать в набор элементов <li> 
    с содержимым в формате "{имя пользователя} - {email пользователя}", которые размещаются внтури <ul> для вывода результата.
    Используем шаблонизацию и вывод данных через innerHTML. Если текста нет, то элемент <ul> пустой.
    Поиск регисторнезависимый.
    
    Для проверки содержит ли строка некоторую другу строку можно использовать метод includes() объекта String.
    Для выполнения регисторнезависимого сравнения можно использовать приведение сравниваемых строк в один регистр. Например, для  
    приведения строки в верхний регистр используем метод toUpperCase() объекта String.


     
